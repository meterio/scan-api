/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IUniswapV2PairInterface extends ethers.utils.Interface {
  functions: {
    "getReserves()": FunctionFragment;
    "swap(uint256,uint256,address,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getReserves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [BigNumberish, BigNumberish, string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;

  events: {};
}

export class IUniswapV2Pair extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IUniswapV2PairInterface;

  functions: {
    getReserves(overrides?: CallOverrides): Promise<{
      reserve0: BigNumber;
      reserve1: BigNumber;
      blockTimestampLast: number;
      0: BigNumber;
      1: BigNumber;
      2: number;
    }>;

    "getReserves()"(overrides?: CallOverrides): Promise<{
      reserve0: BigNumber;
      reserve1: BigNumber;
      blockTimestampLast: number;
      0: BigNumber;
      1: BigNumber;
      2: number;
    }>;

    swap(
      amount0Out: BigNumberish,
      amount1Out: BigNumberish,
      to: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swap(uint256,uint256,address,bytes)"(
      amount0Out: BigNumberish,
      amount1Out: BigNumberish,
      to: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  getReserves(overrides?: CallOverrides): Promise<{
    reserve0: BigNumber;
    reserve1: BigNumber;
    blockTimestampLast: number;
    0: BigNumber;
    1: BigNumber;
    2: number;
  }>;

  "getReserves()"(overrides?: CallOverrides): Promise<{
    reserve0: BigNumber;
    reserve1: BigNumber;
    blockTimestampLast: number;
    0: BigNumber;
    1: BigNumber;
    2: number;
  }>;

  swap(
    amount0Out: BigNumberish,
    amount1Out: BigNumberish,
    to: string,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swap(uint256,uint256,address,bytes)"(
    amount0Out: BigNumberish,
    amount1Out: BigNumberish,
    to: string,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    getReserves(overrides?: CallOverrides): Promise<{
      reserve0: BigNumber;
      reserve1: BigNumber;
      blockTimestampLast: number;
      0: BigNumber;
      1: BigNumber;
      2: number;
    }>;

    "getReserves()"(overrides?: CallOverrides): Promise<{
      reserve0: BigNumber;
      reserve1: BigNumber;
      blockTimestampLast: number;
      0: BigNumber;
      1: BigNumber;
      2: number;
    }>;

    swap(
      amount0Out: BigNumberish,
      amount1Out: BigNumberish,
      to: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "swap(uint256,uint256,address,bytes)"(
      amount0Out: BigNumberish,
      amount1Out: BigNumberish,
      to: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getReserves(overrides?: CallOverrides): Promise<BigNumber>;

    "getReserves()"(overrides?: CallOverrides): Promise<BigNumber>;

    swap(
      amount0Out: BigNumberish,
      amount1Out: BigNumberish,
      to: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swap(uint256,uint256,address,bytes)"(
      amount0Out: BigNumberish,
      amount1Out: BigNumberish,
      to: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getReserves()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swap(
      amount0Out: BigNumberish,
      amount1Out: BigNumberish,
      to: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swap(uint256,uint256,address,bytes)"(
      amount0Out: BigNumberish,
      amount1Out: BigNumberish,
      to: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
